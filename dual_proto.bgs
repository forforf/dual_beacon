const ADV_HANDLE = 1
# Advertising interval are in units of 625 useconds
# BLE Spec says actual advertisment will vary by 20 ms
# So we will set the adv rate to average 100ms by setting
# min to 90ms and max to 110ms
# $90 = 144;  144*0.625 = 90 setting (coincidence they are the same)
# $B0 = 176;  176*0.625 = 110
# NOTE: Above is from Bluegiga doc and is wrong for Dev Kit
# Below results in average of 100ms Adv Interval (142)
const ADV_MIN = 132
const ADV_MAX = 152
const ADV_CHS = 7
const MAX_BEACONS = 2

dim beac_idx( 1 )

dim beac0( 30 )
dim beac1( 30 )

# dim rotate_index(1)
dim read_data

dim rotate_interval
dim rotate_mac(1) # true/false
#dim gap_adv_interval_min(1)


event system_boot( major, minor, patch, build, ll_version, protocol_version, hw )
  beac_idx(0:1) = $00
  # Set rotate constants
  rotate_mac(0:1)  = 0 # true/false

  #TODO: ensure rotate interval is greater than advertisement interval max

	# Set advertisement interval min, max in ms, max # channels is 7
	# gap_set_adv_parameters (min, max, channels)
	rotate_interval = 6552 # half as fast as adv interval #3276 #32768 # 1sec=32768

	call gap_set_adv_parameters( ADV_MIN, ADV_MAX, ADV_CHS )
	
	#set to advertising mode
	# gap_set_mode(discoverable mode, connectable mode)
	#   Gap discoverable modes
	#      0: gap_non_discoverable
	#      1: gap_limited_discoverable
	#      2: gap_general_discoverable
	#      3: gap_broadcast -- same as 0
	#      4: gap_user_data -- User defined advertisement
	#      0x80: gap_enhanced_broadcasting -- report back via Scan Response event
	#   Gap connectable modes
	#      0: gap_non_connectable
	#      1: gap_directed_connectable
	#      2: gap_undirected_connectable
	#      3: gap_scannable_connectable
	#      4: gap_user_data -- Same as 2, but uses ADV_SCAN_IND packets
	
	call gap_set_mode( gap_general_discoverable, gap_undirected_connectable )
	
	# Initialize iBeacon advertisement data
	# Flags = LE General Discovery, single mode device (02 01 06)
	# UUID for Apple's AirLocate app = 83256b74-78d0-43a4-8269-05f9dc8a44ba
	# Radius Networks UUID:  2F234454-CF6D-4A0F-ADF2-F4911BA9FFA6
	
	# Beacon 0 
	# Flags
	beac0( 0:1) = $02
	beac0( 1:1) = $01
	beac0( 2:1) = $06
	
	# Manufacturer data
	beac0( 3:1) = $1a
	beac0( 4:1) = $ff
	
	# Preamble
	beac0( 5:1) = $4c
	beac0( 6:1) = $00
	beac0( 7:1) = $02
	beac0( 8:1) = $15
	
	# UUID0 Initial UUID
	# 2F 23 44 54-CF 6D-4A 0F-AD F2-F4 91 1B A9 FF A6
	beac0( 9:1) = $2f
	beac0(10:1) = $23
	beac0(11:1) = $44
	beac0(12:1) = $54
	beac0(13:1) = $cf
	beac0(14:1) = $6d
	beac0(15:1) = $4a
	beac0(16:1) = $0f
	beac0(17:1) = $ad
	beac0(18:1) = $f2
	beac0(19:1) = $f4
	beac0(20:1) = $91
	beac0(21:1) = $1b
	beac0(22:1) = $a9
	beac0(23:1) = $ff
	beac0(24:1) = $a6
	
	# Major 
	beac0(25:1) = $00
	beac0(26:1) = $0c
		
	# Minor
	beac0(27:1) = $00
	beac0(28:1) = $0d
	
	# Measured power (specified in 2's complement, so 0xC6 is -58)
	beac0(29:1) = $c6


	# Beacon 1
	# Flags
	beac1( 0:1) = $02
	beac1( 1:1) = $01
	beac1( 2:1) = $1a
	
	# Manufacturer data
	beac1( 3:1) = $1b
	beac1( 4:1) = $ff
	
	# Preamble
	beac1( 5:1) = $18
	beac1( 6:1) = $01
	beac1( 7:1) = $ac
	beac1( 8:1) = $be
	
	# UUID0 Initial UUID
	# 2F 23 44 54-CF 6D-4A 0F-AD F2-F4 91 1B A9 FF A6
	beac1( 9:1) = $2f
	beac1(10:1) = $23
	beac1(11:1) = $44
	beac1(12:1) = $54
	beac1(13:1) = $cf
	beac1(14:1) = $6d
	beac1(15:1) = $4a
	beac1(16:1) = $0f
	beac1(17:1) = $ad
	beac1(18:1) = $f2
	beac1(19:1) = $f4
	beac1(20:1) = $91
	beac1(21:1) = $1b
	beac1(22:1) = $a9
	beac1(23:1) = $ff
	beac1(24:1) = $a6
	
	# Major 
	beac1(25:1) = $00
	beac1(26:1) = $0f

	# Minor
	beac1(27:1) = $00
	beac1(28:1) = $0e
	
	# Measured power (specified in 2's complement, so 0xC6 is -58)
	beac1(29:1) = $c6
	# Set advertisement data
	# call gap_set_adv_data( set_scanrsp, adv_data_len, adv_data_data )
	#   set_scanrsp
	#     0: sets advertisement data
	#     1: sets scan response data
	

	
	#rotate_index(0:1) = $0
	# Timer
	#call hardware_set_soft_timer(time, handle, single_shot)
	#  time: 1 = 1/32768 secs
	#  handle: handle set back in event
	#  single_shot: 0: repeat, 1: one shot
	
	# Timer that repeats once per second
	call hardware_set_soft_timer(rotate_interval, ADV_HANDLE, 0)
	
	#set bondable mode
  #	call sm_set_bondable_mode(1)
end

#Timer event listener
event hardware_soft_timer(handle)
  if ADV_HANDLE = handle then

    if beac_idx(0:1) = $00 then
     beac0(27:1) = $00
     beac0(28:1) = beac_idx(0:1)
     call gap_set_adv_data(0, 30, beac0(0:30))
    end if

    if beac_idx(0:1) = $01 then
      beac1(27:1) = $01
      beac1(28:1) = beac_idx(0:1)
      call gap_set_adv_data(0, 30, beac1(0:30))
    end if

    beac_idx(0:1) = beac_idx(0:1) + 1
    if beac_idx(0:1) >= MAX_BEACONS then
      beac_idx(0:1) = $00
    end if
  end if
end

# Disconnection event listener
event connection_disconnected(handle, result)
	# Reset connection parametesr
  call gap_set_mode( gap_general_discoverable, gap_undirected_connectable )
	call gap_set_adv_parameters( ADV_MIN, ADV_MAX, ADV_CHS)
end